<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Servlet--过滤器和监听器]]></title>
    <url>%2F2018%2F07%2F10%2FServlet-%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8%2F</url>
    <content type="text"><![CDATA[希望读者们通过看完这篇文章，可以能够熟练使用过滤器解决乱码显示，能够使用监听器实现事件监听。 过滤器概述在JSP页面中通过页面编码解决中文乱码问题太繁琐，是否有更有效的办法？使用过滤器技术实现对请求数据的过滤，在请求与响应数据之间，添加过滤。 过滤器工作原理过滤器是如何工作的呢？ 过滤器的生命周期过滤器的生命周期 实例化 初始化 执行过滤 销毁 过滤器的应用场合 对请求和响应进行统一处理 对请求进行日志记录和审核 对数据进行屏蔽和替换 对数据进行加密和解密 方法名说明void init(FilterConfig filterConfig)Web容器调用该方法实现过滤器的初始化void doFilter(ServletRequest request, ServletResponse response FilterChain chain)客户端请求资源时，Web容器会调用与资源对应的过滤器的doFilter()方法。在该方法中，可以对请求和响应进行处理，实现过滤器的功能void destory()Web容器调用该方法，造成过滤器失效 Filter接口没有实现类，编写过滤器必须要实现该接口。 过滤器的配置##新建先新建一个filter的类，这里博主用的是IDEA。因此可以右键直接新建这个类，而用eclipse或用myeclipse的读者可以自行去了解如何建一个filter类，这也是可以直接新建的。配置过滤器用来实现双向安全连接网络通信 配置&lt;filter&gt;元素 1234&lt;filter&gt; &lt;filter-name&gt;TestFilter1&lt;/filter-name&gt;&lt;!-- 过滤器的名称 --&gt; &lt;filter-class&gt;com.yetta.filter.TestFilter1&lt;/filter-class&gt;&lt;!-- 过滤器类的路径引用 --&gt;&lt;/filter&gt; 配置&lt;filter-mapping&gt;元素 1234&lt;filter-mapping&gt; &lt;filter-name&gt;TestFilter1&lt;/filter-name&gt;&lt;!-- 与上述的过滤器名称一致 --&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;!-- 过滤器需要过滤的Web资源 --&gt;&lt;/filter-mapping&gt; 映射Filter &lt;filter-mapping&gt;元素用于设置一个Filter所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet名称和资源访问的请求路径( url样式) &lt;filter-name&gt;子元素用于设置filter的注册名称。该值必须是在&lt;filter&gt;元素中声明过的过滤器的名字 &lt;url-pattern&gt;设置filter所拦截的请求路径(过滤器关联的URL样式) &lt;servlet-name&gt;指定过滤器所拦截的Servlet名称。 &lt;dispatcher&gt;指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST. 可以设置多个&lt;dispatcher&gt;子元素用来指定 Filter 对资源的多种调用方式进行拦截123456&lt;filter-mapping&gt; &lt;filter-name&gt;TestFilter1&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt; &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;&lt;/filter-mapping&gt; 过滤器链多个过滤器组成过滤器链 初始化参数配置&lt;init-param&gt;元素1234&lt;init-param&gt; &lt;param-name&gt;initparam&lt;/param-name&gt;&lt;!-- 参数名称 --&gt; &lt;param-value&gt;初始化参数&lt;/param-value&gt;&lt;!-- 参数值 --&gt; &lt;/init-param&gt;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSP--Servlet基础]]></title>
    <url>%2F2018%2F07%2F10%2FJSP-Servlet%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[为什么要使用Servlet使用JSP技术如何编写服务器动态网页？ 在JSP技术出现之前如何编写服务器动态网页？ Servlet是一个Java程序，是在服务器上运行以处理客户端请求并做出响应的程序 初识Servlet123456789101112131415161718192021222324package com.yetta.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;//导入所需的架包@WebServlet(name = "ServletHello", urlPatterns = "/hello")public class ServletHello extends HttpServlet &#123;//继承HttpServlet类 protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;//处理请求的方法 response.setCharacterEncoding("utf-8"); response.setHeader("Content-type", "text/html;charset=utf-8"); PrintWriter out=response.getWriter(); out.print("&lt;h1&gt;"); out.print("hello world"); out.print("&lt;/h1&gt;");//将数据发送给客户端 &#125;//Servlet输出Html标签和内容 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125;&#125; 输出结果hello world就不贴了。 Servlet与JSP的关系 Servlet体系结构]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jsp</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java异常--After end of resultset]]></title>
    <url>%2F2018%2F07%2F06%2FJava%E5%BC%82%E5%B8%B8-Afterendofresultset%2F</url>
    <content type="text"><![CDATA[今天调试代码在做测试的时候，发现JDBC在连接数据库时，在使用ResultSet时报了一个异常java.sql.SQLException: After end of result set，控制台打印如下:1234567891011121314151617181920212223242526272829303132java.sql.SQLException: After end of result set at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:545) at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:513) at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:505) at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:479) at com.mysql.cj.jdbc.result.ResultSetImpl.checkRowPos(ResultSetImpl.java:499) at com.mysql.cj.jdbc.result.ResultSetImpl.getString(ResultSetImpl.java:871) at com.mysql.cj.jdbc.result.ResultSetImpl.getString(ResultSetImpl.java:892) at com.yetta.db.DBUtilTest.getConnection(DBUtilTest.java:24) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:564) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.junit.runner.JUnitCore.run(JUnitCore.java:160) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) 其实报这个异常，无非就是两个原因：1.resultSet 已经被关闭2.resultSet 已经到末尾了 博主的代码献上：12345678910111213@Test public void getConnection() throws SQLException &#123; Connection connection=DBUtil.getConnection(); PreparedStatement preparedStatement=connection.prepareStatement("SELECT * FROM user "); ResultSet resultSet=preparedStatement.executeQuery(); while (resultSet.next()); &#123; System.out.println(resultSet.getString("userName")+" "+resultSet.getString("userPwd")); &#125; resultSet.close(); preparedStatement.close(); connection.close(); &#125; 找了半天的错误，围绕这两个原因才发现是博主太粗心大意了。在我的while循环代码块哪里，竟然用了分号直接结束了循环，导致resultSet.next()直接到了末尾，因此在接下来的输出语句中调用resultSet，报了这个异常。所以大家在报了这个异常后，直接检查是否是上述两个原因就行了。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux，利用Hexo搭建个人博客]]></title>
    <url>%2F2018%2F07%2F04%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言安装Git+Node.js搭建自己的个人博客，当然不仅仅是只安装这两个软件，后续还有一系列详细的操作会在接下来的文章中介绍。博主也是才刚刚开始学习使用这个框架，因此有任何写的不足之处，欢迎在评论区指正。PS:评论区刚刚搭建好，还是有挺多BUG的。O__O” 安装安装Git打开终端，在终端输入下载命令：对于Debian/Ubuntu1sudo apt insall git 如果你的ppa仓库里没有Git的源，需要输入以下代码添加：123add-apt-repository ppa:git-core/ppaapt updateapt install git 对于Fedora12yum install git (由Fedora 21决定)dnf install git (Fedora 22及更高版本) 对于Arch Linux1pacman -S git 对于更多版本的Linux，可以选择点击此处查看。安装成功后，可以输入git version进行测试，得到类似于下面结果则表示安装成功：12yetta@yetta-PC:~$ git versiongit version 2.13.3 安装Node.jsHexo是基于Node.js的静态博客，因此Node.js里面的下载工具npm对于搭建Hexo博客而言是非常好用的，这里是Linux版本的Node.js的下载地址。选择一个版本下载，博主这里选的是LTS版本。下载后解压，博主选择解压到了自己的家目录。解压后配置自己的环境变量，打开终端输入以下命令用vim编辑：1sudo vim /etc/profile 在文件的末尾，添加环境变量，如下：123export NODE_HOME=[Node.js的解压文件夹]export PATH=$PATH:$NODE_HOME/bin export NODE_PATH=$NODE_HOME/lib/node_modules 编辑完毕，保存退出输入source /etc/profile立即生效环境变量。输入node -v，得到类似于下面结果则表示配置成功：12yetta@yetta-PC:~$ node -vv8.11.3 安装Hexo接下来就是用刚刚配置好的Node.js的npm工具安装Hexo: 新建一个文件夹，可以随便命名，不过这个命名代表的是你博客项目的名字，这个目录在下文中统称为站点目录。 进入到站点目录，打开终端，使用命令npm install -g hexo-cli安装hexo，等待安装。 在终端中输入hexo -v，得到类似下面的结果则表示安装成功： 123456789101112131415161718yetta@yetta-PC:~/hexo$ hexo -vhexo: 3.7.1hexo-cli: 1.1.0os: Linux 4.15.0-21deepin-generic linux x64http_parser: 2.8.0node: 8.11.3v8: 6.2.414.54uv: 1.19.1zlib: 1.2.11ares: 1.10.1-DEVmodules: 57nghttp2: 1.32.0napi: 3openssl: 1.0.2oicu: 60.1unicode: 10.0cldr: 32.0tz: 2017c 初始化文件夹，在站点目录路径的终端输入hexo init进行初始化，初始化后站点目录文件如下： 当然刚建立的项目，站点目录下可能没有那么多文件夹和文件，不过以下几个是必需存在的，否则就表明搭建出错了，解释说明：_config.yml网站的 配置 信息，您可以在此配置大部分的参数。package.json应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。scaffolds模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。source资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。themes主题 文件夹。Hexo 会根据主题来生成静态页面。 至此为止，前期的软件的下载安装就已经配置完成了，接下来就是再配置github了。 配置配置github 首先到https://github.com创建github账号，创建账号的过程这里就不一一赘述了。 创建一个新的repository，具体操作如下： 点击New repositery，就进入配置页面。 配置新的repository，具体如下： Repository name填写的是[yourname].github.io注意： 一定要以github.io结尾。 终端配置git的账户信息，输入:12git config --global user.name "YourName"git config --global user.email "YourEmail" 这里的名字和Email就填你自己的就好了。 创建SSH,在终端中输入ssh-keygen -t rsa -C “youremail@example.com“，生成的过程中需要输入用户名和密码，都可以选择不填，直接按Enter建跳过。在生成了SSH秘钥后便进入到家目录的~/.ssh目录下，用cd ~/.ssh命令进入到此目录，找到id_rsa.pub文件，复制此文件的所有内容。 在你的github刚创建的repositery下，找到Settings： 在左侧可以找到Deploy keys然后点Add deploy key。 Title可以随便填写，Key粘贴刚才复制的SSH秘钥，再选中Allow write access： 然后保存就好了。 在终端里面输入ssh -T git@github.com进行验证，如果看到Hi后面是你的用户名，就说明成功了，类似下面的结果： 12Hi yettazora/yettazora.github.io! You've successfully authenticated, but GitHub does not provide shell access. 配置站点目录_config.yml文件这个文件就是整个博客项目的配置文件了。用编辑器编辑_config.yml，找到deploy配置节点进行配置，以下为配置的内容：1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubBlogName.github.io.git branch: master 这里的YourgithubName和YourgithubName分别填你github的名字和项目的名字，不知道的可以参考下图：复制链接，可以直接配置到站点目录的配置文件中去。接下来可以进行本地测试，但是需要服务器的单独组件，因此在站点目录中，输入npm i hexo-server安装完毕之后，输入:123hexo cleanhexo generatehexo server 解释 hexo clean是用于清除缓存文件db.json和已生成的静态文件public。网站显示异常时可以执行这条命令试试。 hexo generate可以缩写为hexo g生成网站静态文件到默认设置的public文件夹。便于查看网站生成的静态文件或者手动部署网站；如果使用自动部署，不需要先执行该命令。 hexo server可以缩写为hexo s启动本地服务器，用于预览主题。默认地址： http://localhost:4000/ 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；对于站点目录_config.yml的修改，需要重启本地服务器后才能预览效果。启动服务后，在浏览器地址栏输入localhost://4000，就可以查看到你的博客默认主页了。 部署上传到github的博客上同样也是需要下载组件，在站点目录中输入npm install hexo-deployer-git –save，等待下载完毕后，在站点目录中输入(同样的hexo deploy可以缩写为hexo d)：123hexo cleanhexo generatehexo deploy 过程中需要输入你的github的名字和密码，自己要看清楚输入。在最后的终端输出信息为：1INFO deploy done:git 就表明部署项目成功了。 完成在浏览器中，输入http://yourgithubname.github.io就可以看到你的博客的信息了，至此博客搭建成功。博主第一次写博客，希望大家看到我的拙作能在Linux上搭建成功。有什么不懂的地方，可以在这里评论（好希望有个人能回复下我==）。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初次见面，别来无恙]]></title>
    <url>%2F2018%2F07%2F02%2F%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2%EF%BC%8C%E5%88%AB%E6%9D%A5%E6%97%A0%E6%81%99%2F</url>
    <content type="text"><![CDATA[阳光正好，微风不燥。慵懒的下午，怀里贪睡的猫。]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo使用入门]]></title>
    <url>%2F2018%2F07%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[官网献上Hexo，官方文档的链接献上官方文档。有什么不是很清楚的，可以通过查官方文档得到答案。实在出了什么不能解决的问题也可以在问题反馈这里得到答案或者在GitHub处留言。 开始使用新建文章1$ hexo new "文章标题" 如何书写详见: 写作 运行1$ hexo server 更多信息: 服务 生成1$ hexo generate 更多信息: 生成 部署1$ hexo deploy 更多信息: 部署]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
